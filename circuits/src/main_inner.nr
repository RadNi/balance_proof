use mpt::mpt_body;
global MAX_PATH_LEANGTH: u32 = 1;

global HONK_VK_SIZE: u32 = 112;
global HONK_PROOF_SIZE: u32 = 456;
global HONK_IDENTIFIER: u32 = 1;
global INITIAL_VERIFICATION_KEY: [Field; HONK_VK_SIZE] = [
    1048576,
    225,
    1,
    209,
    35852114118850286421483606229307043140175,
    174013477758419928133052380405475366,
    23375804585296085376748969920252114021248,
    168705179218435080499564079307248918,
    31725365149191034272901933969884891245439,
    221313314104406683882154514807051084,
    65823323123293817367292252600839578324812,
    217419527791268970059834978939754245,
    7929442105713261471730528031633358446512,
    9846867888505536426978913042550569,
    24473312426805281351453854884857035113681,
    81293043268213340929633817475256933,
    76086441360730879829382557494020652356693,
    208123502961722000259926103522108477,
    74136437878387567726741919407049708216770,
    90744002212507481093030233294203489,
    50042758552549678684718270280528087147667,
    137524930519910341640698404766352992,
    28840706861576096844178590711761704973952,
    217336441813896442853369398747785776,
    54792061639984819956237596272630356939895,
    127499448943189919785780260596284240,
    45992681346014321804372635305952018665151,
    106680727516298462256187825466114164,
    14562079748939669045969884319659605234449,
    126959960760226029796451505354331171,
    8622481582902879799671817138746487140884,
    194305288901144261759125389005715512,
    23949653025405514435257422256810352094022,
    244025231827416919622248753868407513,
    68776104395510455692756389491337388574130,
    111469651008874366597783225313101525,
    41071512718564621668291742192462300547272,
    57345558009113699041241139978107456,
    23756415256265468227768406840493162050130,
    43141062911128778264113750179333684,
    78225515004134527760071860926715117156113,
    107281214250149049052568974420036457,
    1480565341806492334911494117263981501426,
    19416045469644200898091524251243680,
    19146801254292839619380717647925089112842,
    130970706468255111293713792224453820,
    438949730902211612777165603383340186257,
    1805562792083276602061154563549718,
    10603715524708885842455603108617271961103,
    144193169531067895401635483352245891,
    85204303503118844912017508594839698919303,
    248164117528028051884943751148472431,
    30322305567071116830473029596252475240804,
    36121754251293032374231278154544066,
    46575510731033327497322757272273080727791,
    23739843636661841929850252356872107,
    72240650429267289466462822791243650900174,
    209764950356568871571496340158175635,
    77531942765078167985281495814927371011554,
    88996044736828688677151521235293955,
    1927447369815589466235674113944409204883,
    208087207180953719302020681420871592,
    44568281539141316457462486049923523552527,
    249427561859915967314973681519333802,
    6120927595024671427659928566070783837454,
    76056969204721360044988267851985015,
    24283922965114202476915529193559427046464,
    52668276552639639800634371878979430,
    72225205239232134520753906978769947007982,
    122608235366775050705968944001121329,
    43238197325349630555945862615272238392954,
    120298116262421275594996086382885364,
    10906265785743171600678271262854427644113,
    110197741701231194549904054532493490,
    23318486558042583925024562609579479002181,
    132596002798063154483482948914292579,
    18393727802941482660386903258615221276792,
    135916820614870513646064263133697435,
    38397317595007799874392144229881755837396,
    213514528367058576192786706301150420,
    69215375782454550536425439587704475782614,
    102861820669959245074868622695170802,
    46095121040940777680643473097752988182288,
    15062889451671602379542198310967843,
    58522949039337991199463254255218677284585,
    118290797044487762242954795624276982,
    59810119330833799635779725350720007971208,
    121126680782031160665233281506306040,
    5230568830255399478217882289393174572539,
    187256836856408687606915590575793499,
    21167304966653535593756565776664505859285,
    13222222399007114305009339939514881,
    40841317154504669125062909368658230417523,
    48660439166524242800751628985008000,
    63633358407414013974970760687390576508954,
    152328830869130815932818377090050320,
    32632673975154353464743639744426768189675,
    161345867627325753413513193657008662,
    7968186977597110300930661051042053881787,
    62350047227692126012885535617178175,
    79241685421966187411826806985286947739545,
    67527410087798381163687543068194786,
    75737240769260953837256546245274457998044,
    119976831463465369199767598881810392,
    1,
    0,
    2,
    0,
    7322347811288398249058967611354313740153,
    93192695519533333238230410688812689,
    69806679625432378923663382905888076619904,
    24336534741543004006003224530770631
];

// inner layers
fn main(
    nodes: [mpt_body::Node; MAX_PATH_LEANGTH], 
    node_length: u32,


    root: pub [u8; 32],
    trie_key: pub [u8; 32],
    trie_key_new_index: pub u32,
    new_root: pub [u8; 32],

    verification_key: pub [Field; HONK_VK_SIZE],
    is_first_inner_layer: bool,
    proof: [Field; HONK_PROOF_SIZE],
    public_inputs: [Field; 97 + HONK_VK_SIZE]
    // root: pub [u8; 32], 
    // trie_key: pub [u8; 32], 
    // trie_key_new_index (new starting index): pub u8, 
    // this_segment_root (new_root): pub [u8; 32]
    // verification_key: pub [Field, 112] -> it must be inner_mpt_body verification key
) {
    for i in 0 .. HONK_VK_SIZE {
        assert(verification_key[i] == public_inputs[i + 97]);
    }
    let mut final_verification_key: [Field; HONK_VK_SIZE] = [0; HONK_VK_SIZE];
    if is_first_inner_layer {
        final_verification_key = INITIAL_VERIFICATION_KEY;
    } else {
        for i in 0 .. HONK_VK_SIZE {
            final_verification_key[i] = verification_key[i];                
        }
    }
    std::verify_proof_with_type(
        final_verification_key,
        proof,
        public_inputs,
        0x0,
        HONK_IDENTIFIER,
    );

    mpt_body::verify_nodes(
        nodes, 
        node_length, 
        root, 
        trie_key, 
        trie_key_new_index, 
        new_root,
        public_inputs);
}