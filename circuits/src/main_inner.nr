use mpt::mpt_body;
global MAX_PATH_LEANGTH: u32 = 1;

global HONK_VK_SIZE: u32 = 112;
global HONK_PROOF_SIZE: u32 = 456;
global HONK_IDENTIFIER: u32 = 1;
global INITIAL_VERIFICATION_KEY: [Field; HONK_VK_SIZE] = [
    1048576,
    225,
    1,
    209,
    39425107616903775437513369878270255650398,
    108785169355599525219390108715970230,
    42737864695990687155893440557622657345785,
    191443989712470195882762507663682111,
    49953003631671416064424254773826479435348,
    100857228396779401439648307606446111,
    599113770614402335660718128226614131135,
    250762411548649244004223083136161913,
    72774189730487182391739471303792497947207,
    132910677819449423512000923204313154,
    10815914393016017934787420742590156354711,
    9502029022850050138903372651093002,
    17617660893677456539617098729721739136163,
    128331993598137719683104884240651478,
    7228127874070881664593529464440814563030,
    201566747844971310850268224414633440,
    78438218894908963178635763159492191713923,
    94405488915125501302804489869225186,
    2311405347364779962548075504102881015475,
    57426784442605730510851351890039493,
    59117169571290912850699833685493966990945,
    247292332576324715971430809578263470,
    60202097971383826718509911290586873255825,
    138278998558429967934646452730322297,
    14562079748939669045969884319659605234449,
    126959960760226029796451505354331171,
    8622481582902879799671817138746487140884,
    194305288901144261759125389005715512,
    79049582649998526779407098935046557405812,
    210001804216326019141818718758991153,
    81763724960523430070969862159853986963860,
    139962579224830511524504804219183937,
    38639164983005930212952580827005359104900,
    64069607163724565292081359452271365,
    55111348005344402747124461086094107715914,
    133636260638602779433958718463855103,
    9887874580851477046144447273307836549242,
    104674200511300893594114828640586834,
    48719630398016636514620047609410694741730,
    210424475334086411092462363957377580,
    42842037863638156324005133991447382344950,
    137480386533536392896450251288841453,
    47035328228044297776441900370765295283546,
    173110202103830444674901950326310033,
    11112887641222969970017082873103843466867,
    174484445133223108067810261552823131,
    57815443129037738238557035243788779559653,
    31477229325527829704792026835957550,
    30435032827556846807621443611558802162148,
    192499244591283432716783370034215140,
    14792773193968731559777886404070626793426,
    13219065223877586467202103059841261,
    50769548618493460934285640219385602538098,
    203166644067431046410165193866440930,
    19242271191416872708304588749614850553515,
    24807728421194965737700786928807369,
    58704627014371871850356325473687819883540,
    238830144116110834411793770282519495,
    86648169285726988727465091303594622229354,
    222686579469076347806757854632448634,
    21294964069327445052249343158570367106202,
    235379782184750695345581349643995328,
    13886496003144626394126448670318971321666,
    240327232403824935073088248604607799,
    51664912978702404781810109868819468534586,
    13446964095513512711564373737011460,
    52172138373317604495243927733224948827551,
    89367593210970501032588195046914575,
    75388106348890857521996692313878756391950,
    125713967774028504013674863977258727,
    26221481934376961947988756294232837478991,
    16476179773284029226993789833571468,
    62778356482478134110320800963627059280624,
    166517811970581912437022224926473138,
    37827874681377295808845577207848259848393,
    175162184623231335010438116261947735,
    52488277650777191209242300435702028941251,
    61128505125421175470301360558988271,
    70836905343166473949710137058508264029893,
    226823216693233310256772302328025679,
    24179020644815577153077500890335514210560,
    61362484721401556358627008937178337,
    83143671787480400931123931136621432506058,
    154773583399558188434312685779842127,
    5230568830255399478217882289393174572539,
    187256836856408687606915590575793499,
    21167304966653535593756565776664505859285,
    13222222399007114305009339939514881,
    40841317154504669125062909368658230417523,
    48660439166524242800751628985008000,
    63633358407414013974970760687390576508954,
    152328830869130815932818377090050320,
    32632673975154353464743639744426768189675,
    161345867627325753413513193657008662,
    7968186977597110300930661051042053881787,
    62350047227692126012885535617178175,
    79241685421966187411826806985286947739545,
    67527410087798381163687543068194786,
    75737240769260953837256546245274457998044,
    119976831463465369199767598881810392,
    1,
    0,
    2,
    0,
    48671470430818881805594419778897986308453,
    169750906701610196951663932786064427,
    29907946934996970349012165221210185767251,
    14214905746916067955164344064856898
 ];

// inner layers
fn main(
    nodes: [mpt_body::Node; MAX_PATH_LEANGTH], 
    node_length: u32,


    root: pub [u8; 32],
    trie_key: pub [u8; 32],
    trie_key_new_index: pub u32,
    new_root: pub [u8; 32],

    verification_key: pub [Field; HONK_VK_SIZE],
    is_first_inner_layer: bool,
    proof: [Field; HONK_PROOF_SIZE],
    public_inputs: [Field; 97 + HONK_VK_SIZE]
    // root: pub [u8; 32], 
    // trie_key: pub [u8; 32], 
    // trie_key_new_index (new starting index): pub u8, 
    // this_segment_root (new_root): pub [u8; 32]
    // verification_key: pub [Field, 112] -> it must be inner_mpt_body verification key
) {
    let this_segment_root_index_in_inputs = 65;
    let trie_key_initial_index = public_inputs[64] as u32;
    let root_index_in_inputs = 0;
    let trie_key_index_in_inputs: u32 = 32;
    let mut this_segment_root: [u8; 32] = [0; 32];
    for i in 0 .. 32 {
        this_segment_root[i] = public_inputs[i + this_segment_root_index_in_inputs] as u8;
    }

    root.for_eachi(|i, x| {
        assert(x == public_inputs[i + root_index_in_inputs] as u8);
    });

    trie_key.for_eachi(|i, x| {
        assert(x == public_inputs[i + trie_key_index_in_inputs] as u8);
    });

    for i in 0 .. HONK_VK_SIZE {
        assert(verification_key[i] == public_inputs[i + 97]);
    }
    let mut final_verification_key: [Field; HONK_VK_SIZE] = [0; HONK_VK_SIZE];
    if is_first_inner_layer {
        final_verification_key = INITIAL_VERIFICATION_KEY;
    } else {
        for i in 0 .. HONK_VK_SIZE {
            final_verification_key[i] = verification_key[i];                
        }
    }
    std::verify_proof_with_type(
        final_verification_key,
        proof,
        public_inputs,
        0x0,
        HONK_IDENTIFIER,
    );

    mpt_body::verify_nodes(
        nodes, 
        node_length,
        trie_key_initial_index,
        this_segment_root, 
        trie_key, 
        trie_key_new_index, 
        new_root);
}