use mpt::mpt_leaf;

global HONK_VK_SIZE: u32 = 112;
global HONK_PROOF_SIZE: u32 = 456;
global HONK_IDENTIFIER: u32 = 1;
global INNER_VERIFICATION_KEY: [Field; HONK_VK_SIZE] = [
    1048576,
    225,
    1,
    209,
    32178467789116770841777543416920784167426,
    37176904148243724813620845590527498,
    24206688530096009943347547806424484665998,
    125582546169886072153338612711795398,
    5473466790828717266360438554283174391769,
    107288312153085806487767214008282322,
    59701878385640449893546064004844910901499,
    224417257709335101323766217137204605,
    63403208846003135162510361127640123651565,
    52080017662009454272136481371333973,
    69810038579703482617735294674996358380148,
    206310368753481555147743506649481635,
    52775339300045851197847005397155096646921,
    198597574344174643005042127428670645,
    35200553952482032949175962346134467610846,
    222561427320513618409792202472862966,
    59749307459018505888554578013597789661077,
    238735919579274999742728610083645808,
    40967037215252356953336500538293669229444,
    2898201467051540626984496154755854,
    61326103469305474035051904833524186728874,
    107858435296956115903511386153518653,
    43728441428264595016030012898756392091136,
    137808996598872058930187262643217198,
    40744842867917385867114936694380021279167,
    226960815172472237954331227065859057,
    75451714317844174621566783274543756912390,
    6653166157999431893930265624822306,
    3340931780808853105426136756763905995590,
    161816684174393586839403447150197034,
    18868344277530752566238128468996076732390,
    76220553652459668162276987822799976,
    9424080108260507361513675265867704233959,
    60703232735644047482113224056843226,
    5489504145964288835103073362647741674978,
    44244440250709839499017748337505876,
    77669213128763504839193064685391156127072,
    244534775341620242492417290384020429,
    65158818267264667422224600354044584070672,
    190052381375718877021425996765884278,
    36807438352461531418687703815661555373922,
    21352152462815314892568066468593485,
    58230310255268634259474245231610546933186,
    24811583431773212724360206459382725,
    27022949380583862078070725176599950084139,
    50698067675691070946131919521748132,
    37850950845737680617504334120221357419319,
    175147732256003612637533829759032419,
    85552868235605558002686014235857754645594,
    196999171441147662264655057874383034,
    19767460347591378777465806746954169167578,
    50767367995835831566669691522388744,
    79685096942247141517099755629857531965511,
    20089021804506391925800468683007625,
    85410612682445892147653209738664591623194,
    174488415464717870945373272387178519,
    31339857412651636431883171535765233089680,
    169123651766930208776232316452574454,
    501165218807123225362327833999174693931,
    168757551747544817632878057069793381,
    45653573176265391094917942871405178291333,
    230373406490194682181858160742570425,
    78292351131990273114604644388002610990202,
    149307477701506336453199654196791552,
    70448898365420138390966286410383462021220,
    183511361265950487394255548300176792,
    53910324683457395196938421601367476892348,
    141060334195364250771451904855735352,
    56507880840999861491307954585456799749285,
    182093056124089380261910960218795603,
    37487060571723101409851864570188579336418,
    219375668430420621844184153065641327,
    56031913884908896019531318457311105882772,
    158191990142748041800629761085221624,
    66297720451249426423576686976356422368806,
    123929277896828268554438058323665114,
    18571453150780624787918567041565258685845,
    183557710734605987625387173415287825,
    56035318642529885923741445461645588490118,
    194928285583696232685872954048236807,
    43981192007386538045887504808980312775623,
    65553680469584442596458712493604052,
    60534582314410651482733340011496346112244,
    138805404372234544635366558166497004,
    5230568830255399478217882289393174572539,
    187256836856408687606915590575793499,
    21167304966653535593756565776664505859285,
    13222222399007114305009339939514881,
    40841317154504669125062909368658230417523,
    48660439166524242800751628985008000,
    63633358407414013974970760687390576508954,
    152328830869130815932818377090050320,
    32632673975154353464743639744426768189675,
    161345867627325753413513193657008662,
    7968186977597110300930661051042053881787,
    62350047227692126012885535617178175,
    79241685421966187411826806985286947739545,
    67527410087798381163687543068194786,
    75737240769260953837256546245274457998044,
    119976831463465369199767598881810392,
    1,
    0,
    2,
    0,
    80569935766428809749462187760062433493244,
    116207525189861012038122583942168947,
    71069684928629806142783827075940952993998,
    213099869264697218894484684854003895
];

fn verify_signature(address: [u8; 20], hashed_message : [u8; 32], pub_key_x : [u8; 32], pub_key_y : [u8; 32], signature : [u8; 64]) {
    let key = ecrecover::secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);
    let addr = key.ecrecover(signature, hashed_message);

    let mut sum: Field = 0;
    for i in 0 .. 19 {
        let x = address[i] as Field;
        sum += x;
        sum *= 0x100;
    }
    sum += address[19] as Field;
    assert(addr == sum);
}

fn verify_balance(
    account: mpt_leaf::Account,
    balance_target: [u8; 32],
    balance_target_length: u8
    ) {

    // balance target
    let mut result: u8 = 0;
    if account.balance_length < balance_target_length {
        result = 1;
    } else if account.balance_length > balance_target_length {
        result = 2;
    } else {
        for i in 0 .. 32 {
            if result == 0 {
                if account.balance[i] < balance_target[i] {
                    result = 1;
                } else if account.balance[i] > balance_target[i] {
                    result = 2;
                }
            }
        }
    }
    assert(result == 2);
}

// leaf
fn main(
    account: mpt_leaf::Account,
    root: [u8; 32], 

    hashed_message : [u8;32], pub_key_x : [u8;32], pub_key_y : [u8;32], signature : [u8;64],

    balance_target: pub [u8; 32],
    balance_target_length: pub u8,
    trie_key_index: u8,

    // verification_key: pub [Field; HONK_VK_SIZE],
    proof: [Field; HONK_PROOF_SIZE],
    public_inputs: [Field; 97 + HONK_VK_SIZE]
    // root: pub [u8; 32], 
    // trie_key: pub [u8; 32], 
    // trie_key_new_index (new starting index): pub u8, 
    // this_segment_root (new_root): pub [u8; 32]
    // verification_key: pub [Field, 112] -> it must be inner_mpt_body verification key
) {
    verify_signature(account.address, hashed_message, pub_key_x, pub_key_y, signature);
    
    std::verify_proof_with_type(
        INNER_VERIFICATION_KEY,
        proof,
        public_inputs,
        0x0,
        HONK_IDENTIFIER,
    );
    let mut trie_key: [u8; 32] = [0; 32];
    let mut leaf_hash: [u8; 32] = [0; 32];

    for i in 0 .. 32 {
        trie_key[i] = public_inputs[i + 32] as u8;
    }

    for i in 0 .. 32 {
        assert(public_inputs[i] == root[i] as Field);
    }

    assert(public_inputs[64] == trie_key_index as Field);

    for i in 0 .. 32 {
        leaf_hash[i] = public_inputs[i + 65] as u8;
    }

    for i in 0 .. HONK_VK_SIZE {
        assert(public_inputs[i + 97] == INNER_VERIFICATION_KEY[i]);
    }
    
    account.verify_leaf_node(
        trie_key_index,
        trie_key,
        leaf_hash
    );

    // balance target
    verify_balance(account, balance_target, balance_target_length);
}
