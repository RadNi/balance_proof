use mpt::mpt_leaf;

global HONK_VK_SIZE: u32 = 112;
global HONK_PROOF_SIZE: u32 = 456;
global HONK_IDENTIFIER: u32 = 1;
global INNER_VERIFICATION_KEY: [Field; HONK_VK_SIZE] = [
    1048576,
    225,
    1,
    209,
    20654652275327798350708766986719285112991,
    31161961915470481299383591535590734,
    2723879743484183363562222725478705138008,
    26073669177765384529712704766809749,
    21961911516566297638760296679330847306302,
    119158070355510656155394944955635013,
    70737047012641531239911049831329158897129,
    188363922993074263792087916031278501,
    5142204677435317268479564399254330295122,
    206252226897154701604936953647764930,
    2376040492443531585297082896679228726613,
    227272138664760911002663588759823534,
    54004538512339824221296706868493409093289,
    192659370253320830584371922350736691,
    6350862121174862933918807955344421519270,
    88088740691339410925033538647287896,
    17062188930813554095209205835937770666026,
    219759779325542338888179858733041398,
    23971077356746609994614973074031868879512,
    42455362210436404987791480359382890,
    61326103469305474035051904833524186728874,
    107858435296956115903511386153518653,
    43728441428264595016030012898756392091136,
    137808996598872058930187262643217198,
    40744842867917385867114936694380021279167,
    226960815172472237954331227065859057,
    75451714317844174621566783274543756912390,
    6653166157999431893930265624822306,
    3340931780808853105426136756763905995590,
    161816684174393586839403447150197034,
    18868344277530752566238128468996076732390,
    76220553652459668162276987822799976,
    9424080108260507361513675265867704233959,
    60703232735644047482113224056843226,
    5489504145964288835103073362647741674978,
    44244440250709839499017748337505876,
    77669213128763504839193064685391156127072,
    244534775341620242492417290384020429,
    65158818267264667422224600354044584070672,
    190052381375718877021425996765884278,
    36807438352461531418687703815661555373922,
    21352152462815314892568066468593485,
    58230310255268634259474245231610546933186,
    24811583431773212724360206459382725,
    27022949380583862078070725176599950084139,
    50698067675691070946131919521748132,
    37850950845737680617504334120221357419319,
    175147732256003612637533829759032419,
    85552868235605558002686014235857754645594,
    196999171441147662264655057874383034,
    19767460347591378777465806746954169167578,
    50767367995835831566669691522388744,
    60785268770827666286153076593420238136424,
    41164959927434187422526788756796303,
    18665969876199062777045046059038580693307,
    246141451053810722269267963063666613,
    52883168773173598161482782099431289619488,
    8638729627904689404864841011434840,
    39726812884095262232547883935361287180237,
    59203575002855090343600110241467748,
    48217145539693530583869175451366380703048,
    110854030961979353104342725325087173,
    23644428450980296020314135729050153495701,
    179039359430587629998193790094060024,
    46899402177723163269691088367484387500937,
    32816489336841772640397854277091813,
    12405603616318679333236483035171701276154,
    169859165837760844319412370455124641,
    29199134231620881378666716295681261423159,
    170077129303599706256280390012633148,
    3339937014450256849310398477773912272765,
    71306801729302697919358187468896621,
    48533492303491211365238242385539100840688,
    178575890655504145161833486754770286,
    34137279750762312318690003363812585382229,
    105373994380502211709152274216976322,
    47571269484129020155962645412044394183236,
    197286221041826025267050403371981631,
    44756885631378284561802252961951510483732,
    229499996157738325343206381669972499,
    43981192007386538045887504808980312775623,
    65553680469584442596458712493604052,
    60534582314410651482733340011496346112244,
    138805404372234544635366558166497004,
    5230568830255399478217882289393174572539,
    187256836856408687606915590575793499,
    21167304966653535593756565776664505859285,
    13222222399007114305009339939514881,
    40841317154504669125062909368658230417523,
    48660439166524242800751628985008000,
    63633358407414013974970760687390576508954,
    152328830869130815932818377090050320,
    32632673975154353464743639744426768189675,
    161345867627325753413513193657008662,
    7968186977597110300930661051042053881787,
    62350047227692126012885535617178175,
    79241685421966187411826806985286947739545,
    67527410087798381163687543068194786,
    75737240769260953837256546245274457998044,
    119976831463465369199767598881810392,
    1,
    0,
    2,
    0,
    80569935766428809749462187760062433493244,
    116207525189861012038122583942168947,
    71069684928629806142783827075940952993998,
    213099869264697218894484684854003895
 ];

fn verify_signature(address: [u8; 20], hashed_message : [u8; 32], pub_key_x : [u8; 32], pub_key_y : [u8; 32], signature : [u8; 64]) {
    let key = ecrecover::secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);
    let addr = key.ecrecover(signature, hashed_message);

    let mut sum: Field = 0;
    for i in 0 .. 19 {
        let x = address[i] as Field;
        sum += x;
        sum *= 0x100;
    }
    sum += address[19] as Field;
    assert(addr == sum);
}

fn verify_balance(
    account: mpt_leaf::Account,
    balance_target: [u8; 32],
    balance_target_length: u8
    ) {

    // balance target
    let mut result: u8 = 0;
    if account.balance_length < balance_target_length {
        result = 1;
    } else if account.balance_length > balance_target_length {
        result = 2;
    } else {
        for i in 0 .. 32 {
            if result == 0 {
                if account.balance[i] < balance_target[i] {
                    result = 1;
                } else if account.balance[i] > balance_target[i] {
                    result = 2;
                }
            }
        }
    }
    assert(result == 2);
}

// leaf
fn main(
    account: mpt_leaf::Account,
    root: [u8; 32], 

    hashed_message : pub [u8;32], pub_key_x : [u8;32], pub_key_y : [u8;32], signature : [u8;64],

    balance_target: pub [u8; 32],
    balance_target_length: pub u8,
    trie_key_index: u8,

    // verification_key: pub [Field; HONK_VK_SIZE],
    proof: [Field; HONK_PROOF_SIZE],
    public_inputs: [Field; 97 + HONK_VK_SIZE]
    // root: pub [u8; 32], 
    // trie_key: pub [u8; 32], 
    // trie_key_new_index (new starting index): pub u8, 
    // this_segment_root (new_root): pub [u8; 32]
    // verification_key: pub [Field, 112] -> it must be inner_mpt_body verification key
) {
    verify_signature(account.address, hashed_message, pub_key_x, pub_key_y, signature);
    
    std::verify_proof_with_type(
        INNER_VERIFICATION_KEY,
        proof,
        public_inputs,
        0x0,
        HONK_IDENTIFIER,
    );
    let mut trie_key: [u8; 32] = [0; 32];
    let mut leaf_hash: [u8; 32] = [0; 32];

    for i in 0 .. 32 {
        trie_key[i] = public_inputs[i + 32] as u8;
    }

    for i in 0 .. 32 {
        assert(public_inputs[i] == root[i] as Field);
    }

    assert(public_inputs[64] == trie_key_index as Field);

    for i in 0 .. 32 {
        leaf_hash[i] = public_inputs[i + 65] as u8;
    }

    for i in 0 .. HONK_VK_SIZE {
        assert(public_inputs[i + 97] == INNER_VERIFICATION_KEY[i]);
    }
    
    account.verify_leaf_node(
        trie_key_index,
        trie_key,
        leaf_hash
    );

    // balance target
    verify_balance(account, balance_target, balance_target_length);
}
